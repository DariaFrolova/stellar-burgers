import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { getFeedsApi, getOrderByNumberApi, getOrdersApi } from '@api';
import { TOrdersData, TOrder } from '@utils-types';

type TOrderResponse = TOrder;

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
interface FeedState {
  orders: TOrder[];
  orderModalData: TOrder | null;
  total: number;
  totalToday: number;
  loading: boolean;
  error: string | null;
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
const initialState: FeedState = {
  orders: [],
  orderModalData: null,
  total: 0,
  totalToday: 0,
  loading: false,
  error: null
};

export const getFeedAll = createAsyncThunk<TOrdersData, void>(
  'feed/getFeedAll',
  async () => {
    const response = await getFeedsApi();
    return response;
  }
);

export const getOrders = createAsyncThunk<TOrder[], void>(
  'feed/getOrders',
  async () => {
    const response = await getOrdersApi();
    return response;
  }
);

export const getOrderByNumber = createAsyncThunk<
  TOrder,
  number,
  { rejectValue: string }
>('order/getOrderByNumber', async (number, { rejectWithValue }) => {
  try {
    const response = await getOrderByNumberApi(number);
    return response as unknown as TOrder;
  } catch (error) {
    return rejectWithValue(
      'üëΩ –£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –º—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞'
    );
  }
});

// –ù–æ–≤—ã–π thunk –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
export const fetchOrders = createAsyncThunk<TOrdersData, void>(
  'feed/fetchOrders',
  async () => {
    const orders = await getOrdersApi();
    return { orders, total: orders.length, totalToday: 0 }; // –ü—Ä–∏–º–µ—Ä: total –∏ totalToday –º–æ–≥—É—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω—ã –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  }
);

const feedSlice = createSlice({
  name: 'feed',
  initialState,
  reducers: {
    setOrderModalData: (state, action) => {
      state.orderModalData = action.payload;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(getFeedAll.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(getFeedAll.fulfilled, (state, action) => {
        state.loading = false;
        state.orders = action.payload.orders; // 'action.payload' —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Å—Å–∏–≤ –∑–∞–∫–∞–∑–æ–≤
        state.total = action.payload.total; // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
        state.totalToday = action.payload.totalToday; // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
      })
      .addCase(getFeedAll.rejected, (state, action) => {
        state.loading = false;
        state.error =
          action.error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤';
      })
      .addCase(getOrders.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(getOrders.fulfilled, (state, action) => {
        state.loading = false;
        state.orders = action.payload; // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
      })
      .addCase(getOrders.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤';
      });
  },
});


export default feedSlice.reducer;

// –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
export const selectOrders = (state: { feed: typeof initialState }) =>
  state.feed.orders;

export const selectTotal = (state: { feed: typeof initialState }) =>
  state.feed.total;
export const selectTotalToday = (state: { feed: typeof initialState }) =>
  state.feed.totalToday;
export const selectLoading = (state: { feed: typeof initialState }) =>
  state.feed.loading;
export const selectError = (state: { feed: typeof initialState }) =>
  state.feed.error;

  export const selectOrderModalData = (state: { feedSlice: typeof initialState }) => 
  state.feedSlice.orderModalData;

export const getProfileOrders = (state: { feedSlice: FeedState }) =>
  state.feedSlice.orders;



