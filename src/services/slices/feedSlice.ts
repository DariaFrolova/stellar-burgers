import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { getFeedsApi, getOrderByNumberApi, getOrdersApi } from '@api';
import { TOrdersData, TOrder } from '@utils-types';

type TOrderResponse = TOrder;

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
interface FeedState {
  orders: TOrder[];
  orderModalData: TOrder | null;
  total: number;
  totalToday: number;
  loading: boolean;
  error: string | null;
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
const initialState: FeedState = {
  orders: [],
  orderModalData: null,
  total: 0,
  totalToday: 0,
  loading: false,
  error: null
};

export const getFeedAll = createAsyncThunk<TOrdersData, void>(
  'feed/getFeedAll',
  async () => {
    const response = await getFeedsApi();
    return response; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  }
);

export const getOrders = createAsyncThunk<TOrder[], void>(
  'feed/getOrders',
  async () => {
    const response = await getOrdersApi();
    return response; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
  }
);

export const getOrderByNumber = createAsyncThunk<
  TOrder,
  number,
  { rejectValue: string }
>('order/getOrderByNumber', async (number, { rejectWithValue }) => {
  try {
    const response = await getOrderByNumberApi(number);
    return response as unknown as TOrder; // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞
  } catch (error) {
    return rejectWithValue(
      'üëΩ –£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –º—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞'
    ); // –í–æ–∑–≤—Ä–∞—Ç –æ—à–∏–±–∫–∏
  }
});


// –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
export const fetchOrders = createAsyncThunk<TOrdersData, void>(
  'feed/fetchOrders',
  async () => {
    const response = await getFeedsApi();
    return response;
  }
);

// –°–æ–∑–¥–∞–µ–º —Å–ª–∞–π—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
const feedSlice = createSlice({
  name: 'feed',
  initialState,
  reducers: {},

  extraReducers: (builder) => {
    builder
      // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...
      .addCase(getFeedAll.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(getFeedAll.fulfilled, (state, action) => {
        state.loading = false;
        state.orders = action.payload.orders; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ 'action.payload' —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Å—Å–∏–≤ –∑–∞–∫–∞–∑–æ–≤
        state.total = action.payload.total; // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
        state.totalToday = action.payload.totalToday; // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
      })
      .addCase(getFeedAll.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤'; // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—à–∏–±–∫–∏
      })
      .addCase(getOrders.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(getOrders.fulfilled, (state, action) => {
        state.loading = false;
        state.orders = action.payload; // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
      })
      .addCase(getOrders.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤'; // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—à–∏–±–∫–∏
      });
  }
});
//   extraReducers: (builder) => {
//     // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
//     builder
//       .addCase(fetchOrders.pending, (state) => {
//         state.loading = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∑–∞–ø—Ä–æ—Å–∞
//         state.error = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
//       })
//       .addCase(fetchOrders.fulfilled, (state, action) => {
//         state.loading = false; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
//         state.orders = action.payload.orders; // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
//         state.total = action.payload.total; // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
//         state.totalToday = action.payload.totalToday; // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
//       })
//       .addCase(fetchOrders.rejected, (state, action) => {
//         state.loading = false; // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
//         state.error = action.error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤'; // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—à–∏–±–∫–∏
//       })
//       // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ –Ω–æ–º–µ—Ä—É
//       .addCase(getOrderByNumber.pending, (state) => {
//         state.loading = true; // –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
//         state.error = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
//       })
//       .addCase(getOrderByNumber.fulfilled, (state, action) => {
//         state.loading = false; // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
//         state.orderModalData = action.payload; // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –ø–æ –Ω–æ–º–µ—Ä—É
//       })
//       .addCase(getOrderByNumber.rejected, (state, action) => {
//         state.loading = false; // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
//         state.error =
//           action.error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–∞ –ø–æ –Ω–æ–º–µ—Ä—É'; // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—à–∏–±–∫–∏
//       });
//   }
// });

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–¥—å—é—Å–µ—Ä, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤ store
export default feedSlice.reducer;

// –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
export const selectOrders = (state: { feed: typeof initialState }) =>
  state.feed.orders;
export const selectTotal = (state: { feed: typeof initialState }) =>
  state.feed.total;
export const selectTotalToday = (state: { feed: typeof initialState }) =>
  state.feed.totalToday;
export const selectLoading = (state: { feed: typeof initialState }) =>
  state.feed.loading;
export const selectError = (state: { feed: typeof initialState }) =>
  state.feed.error;
export const selectOrderModalData = (state: { feed: typeof initialState }) =>
  state.feed.orderModalData; // –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ orderModalData



  
// –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
// import { getFeedsApi } from '@api';
// import { TOrdersData, TOrder } from '@utils-types';

// //–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
// interface FeedState {
//     orders: TOrder[];
//     total: number;
//     totalToday: number;
//     loading: boolean;
//     error: string | null; // error –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ null
// }

// // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
// const initialState: FeedState = {
//     orders: [],
//     total: 0,
//     totalToday: 0,
//     loading: false,
//     error: null,
// };

//   // –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
// export const fetchOrders = createAsyncThunk<TOrdersData, void>(
//     'feed/fetchOrders',
//     async () => {
//       const response = await getFeedsApi(); // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API
//       return response; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
//     }
//   );

//   // –°–æ–∑–¥–∞–µ–º —Å–ª–∞–π—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
// const feedSlice = createSlice({
//     name: 'feed', // –ò–º—è —Å–ª–∞–π—Å–∞
//     initialState, // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
//     reducers: {}, // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ä–µ–¥—å—é—Å–µ—Ä—ã, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è
//     extraReducers: (builder) => {
//       // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
//       builder
//         .addCase(fetchOrders.pending, (state) => {
//           state.loading = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∑–∞–ø—Ä–æ—Å–∞
//           state.error = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
//         })
//         .addCase(fetchOrders.fulfilled, (state, action) => {
//           state.loading = false; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
//           state.orders = action.payload.orders; // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
//           state.total = action.payload.total; // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
//           state.totalToday = action.payload.totalToday; // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
//         })
//         .addCase(fetchOrders.rejected, (state, action) => {
//           state.loading = false; // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
//           state.error = action.error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤'; // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—à–∏–±–∫–∏
//         });
//     },
//   });

// // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–¥—å—é—Å–µ—Ä, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤ store
// export default feedSlice.reducer;

// // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
// export const selectOrders = (state: { feed: typeof initialState }) => state.feed.orders;
// export const selectTotal = (state: { feed: typeof initialState }) => state.feed.total;
// export const selectTotalToday = (state: { feed: typeof initialState }) => state.feed.totalToday;
// export const selectLoading = (state: { feed: typeof initialState }) => state.feed.loading;
// export const selectError = (state: { feed: typeof initialState }) => state.feed.error;

// // –≤–∞—Ä–∏–∞–Ω—Ç 3
// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
// import { getFeedsApi, getOrderByNumberApi } from '@api'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ API —Ñ—É–Ω–∫—Ü–∏–∏
// import { TOrdersData, TOrder } from '@utils-types';

// // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
// interface FeedState {
//     orders: TOrder[];
//     orderModalData: TOrder | null; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –ø–æ –Ω–æ–º–µ—Ä—É
//     total: number;
//     totalToday: number;
//     loading: boolean;
//     error: string | null; // error –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ null
// }

// // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
// const initialState: FeedState = {
//     orders: [],
//     orderModalData: null, // –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - null (–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö)
//     total: 0,
//     totalToday: 0,
//     loading: false,
//     error: null,
// };

// // –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
// export const fetchOrders = createAsyncThunk<TOrdersData, void>(
//     'feed/fetchOrders',
//     async () => {
//         const response = await getFeedsApi(); // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API
//         return response; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
//     }
// );

// // –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ –Ω–æ–º–µ—Ä—É
// export const getOrderByNumber = createAsyncThunk<TOrder, number>(
//     'order/getOrderByNumber',
//     async (orderNumber) => {
//         const response = await getOrderByNumberApi(orderNumber); // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞
//         return response; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
//     }
// );

// // –°–æ–∑–¥–∞–µ–º —Å–ª–∞–π—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
// const feedSlice = createSlice({
//     name: 'feed', // –ò–º—è —Å–ª–∞–π—Å–∞
//     initialState, // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
//     reducers: {}, // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ä–µ–¥—å—é—Å–µ—Ä—ã, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è
//     extraReducers: (builder) => {
//         // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
//         builder
//             .addCase(fetchOrders.pending, (state) => {
//                 state.loading = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∑–∞–ø—Ä–æ—Å–∞
//                 state.error = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
//             })
//             .addCase(fetchOrders.fulfilled, (state, action) => {
//                 state.loading = false; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
//                 state.orders = action.payload.orders; // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
//                 state.total = action.payload.total; // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
//                 state.totalToday = action.payload.totalToday; // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
//             })
//             .addCase(fetchOrders.rejected, (state, action) => {
//                 state.loading = false; // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
//                 state.error = action.error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤'; // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—à–∏–±–∫–∏
//             })
//             // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ –Ω–æ–º–µ—Ä—É
//             .addCase(getOrderByNumber.pending, (state) => {
//                 state.loading = true; // –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
//                 state.error = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
//             })
//             .addCase(getOrderByNumber.fulfilled, (state, action) => {
//                 state.loading = false; // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
//                 state.orderModalData = action.payload; // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –ø–æ –Ω–æ–º–µ—Ä—É
//             })
//             .addCase(getOrderByNumber.rejected, (state, action) => {
//                 state.loading = false; // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
//                 state.error = action.error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–∞ –ø–æ –Ω–æ–º–µ—Ä—É'; // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—à–∏–±–∫–∏
//             });
//     },
// });

// // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–¥—å—é—Å–µ—Ä, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤ store
// export default feedSlice.reducer;

// // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
// export const selectOrders = (state: { feed: typeof initialState }) => state.feed.orders;
// export const selectTotal = (state: { feed: typeof initialState }) => state.feed.total;
// export const selectTotalToday = (state: { feed: typeof initialState }) => state.feed.totalToday;
// export const selectLoading = (state: { feed: typeof initialState }) => state.feed.loading;
// export const selectError = (state: { feed: typeof initialState }) => state.feed.error;
// export const selectOrderModalData = (state: { feed: typeof initialState }) => state.feed.orderModalData; // –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ orderModalData
